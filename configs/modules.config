process {
    
    
    withName: 'FQ_TO_SAM' {
        container   = 'bwa:1'
        cpus   = { check_max( 64, 'cpus')}
        memory = { check_max( 200.GB, 'memory')}
        time   = { check_max( 48.h, 'time')}
    }

    withName: 'FASTA_INDEX' {
        container   = 'bwa:1'
        cpus   = { check_max( 64, 'cpus')}
        memory = { check_max( 200.GB, 'memory')}
        time   = { check_max( 48.h, 'time')}
    }

    withName: 'IMPORT' {
        container   = 'samtools:1' 
        cpus   = { check_max( 64, 'cpus')}
        memory = { check_max( 200.GB, 'memory')}
        time   = { check_max( 48.h, 'time')}
    }

    withName: 'SORT' {
        container   = 'samtools:1'
        cpus   = { check_max( 64, 'cpus')}
        memory = { check_max( 200.GB, 'memory')}
        time   = { check_max( 48.h, 'time')}
    }

    withName: 'EXPANSIONHUNTER' {
        container   = 'expansionhunter:1'
        cpus   = { check_max( 64, 'cpus')}
        memory = { check_max( 200.GB, 'memory')}
        time   = { check_max( 48.h, 'time')}
    }

    withName: 'EXTRACTING' {
        container = "python:v1"
        cpus   = { check_max( 64, 'cpus')}
        memory = { check_max( 200.GB, 'memory')}
        time   = { check_max( 48.h, 'time')}
    }

    withName: 'REPORTING' {
        container = "python:v1"
        cpus   = { check_max( 64, 'cpus')}
        memory = { check_max( 200.GB, 'memory')}
        time   = { check_max( 48.h, 'time')}
    }
}   


 // Function to ensure that resource requirements don't go beyond
 // a maximum limit
def check_max(obj, type) {
     if (type == 'memory') {
         try {
             if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                 return params.max_memory as nextflow.util.MemoryUnit
             else
                 return obj
         } catch (all) {
             println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
         }
     } else if (type == 'time') {
        try {
           if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                 return params.max_time as nextflow.util.Duration
             else
                 return obj
         } catch (all) {
             println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
             return obj
         }
     } else if (type == 'cpus') {
         try {
             return Math.min( obj, params.max_cpus as int )
         } catch (all) {
             println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
             return obj        
             }
     }
 }